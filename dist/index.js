import{Buffer as d}from"node:buffer";import{EventEmitter as g}from"node:events";import b from"imap";import{simpleParser as x}from"mailparser";var a=class extends g{imap;options;msgUidMap=new Map;fetchUnread=!1;constructor(t,e=!1){if(!t)throw new Error("options is required!");super(),this.options=t,this.fetchUnread=e,this.imap=this._setupImap()}_setupImap(){let t=this,{user:e,password:o,host:r,port:s}=t.options,n=new b({user:e,password:o,host:r,port:Number.parseInt(s,10),tls:!0,tlsOptions:{rejectUnauthorized:!1}});return n.on("ready",()=>{this.openInbox()}),n.on("error",i=>{}),n.on("log",console.log),n}openInbox(){let t=this;t.imap.openBox("INBOX",!1,(e,o)=>{if(e)throw e;t.fetchUnread&&t.fetchUnreadEmails(),t.imap.on("mail",r=>{t.fetchLatestEmails(o,r)})})}fetchUnreadEmails(){let t=this;t.imap.search(["UNSEEN"],(e,o)=>{if(e)throw e;o?.length&&t.fetchEmails(o)})}fetchLatestEmails(t,e){let o=this,r=t.messages.total,s=`${Math.max(1,r-e+1)}:${r}`;o.fetchEmails(s)}fetchEmails(t){let e=this,o=e.imap.seq.fetch(t,{bodies:"",struct:!0,markSeen:!0});o.on("message",(r,s)=>{r.on("body",(n,i)=>{e.parseEmail(n,i.size,s)}),r.on("attributes",n=>{let{uid:i}=n;e.msgUidMap.set(s,i)}),r.on("end",()=>{})}),o.on("error",r=>{throw r}),o.on("end",()=>{})}parseEmail(t,e,o){let r=this,s=d.alloc(e),n=0;t.on("data",i=>{i.copy(s,n),n+=i.length}),t.on("end",()=>{x(s).then(i=>{let{subject:l,text:m,html:h,attachments:f}=i,u=r.msgUidMap.get(o);l&&r.emit(l,{msgUid:u,text:m,html:h,attachments:f}),r.msgUidMap.delete(o)})}),t.on("error",i=>{})}start(){this.imap.connect()}stop(){this.imap.end(),this.msgUidMap.clear()}use(){}markAsRead(t){return new Promise((e,o)=>{this.imap.seq.addFlags(t,"\\Seen",r=>{r?o(r):e(!0)})})}useCmds(t){let e=this;t.forEach(o=>{e.on(o.command,o.action)})}};import{createTransport as E}from"nodemailer";var p=class{transport;constructor(t){if(!t)throw new Error("options is required!");let{user:e,password:o,smtphost:r,smtpport:s,proxy:n}=t,i={pool:!0,host:r,port:s,secure:!0,auth:{user:e,pass:o},proxy:n};this.transport=E(i)}testTransport(){return new Promise((t,e)=>{this.transport.verify((o,r)=>{o?e(o):t(r)})})}send(t,e,o,r,s){return this.transport.sendMail({from:t,to:e,subject:o,text:r,html:s})}};export{a as EmailListener,p as EmialSender};
