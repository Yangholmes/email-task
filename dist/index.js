import{Buffer as u}from"node:buffer";import{EventEmitter as f}from"node:events";import g from"imap";import{simpleParser as d}from"mailparser";var l=class extends f{imap;options;constructor(t){if(!t)throw new Error("options is required!");super(),this.options=t,this.imap=this._setupImap()}_setupImap(){let t=this,{user:o,password:r,host:e,port:i}=t.options,s=new g({user:o,password:r,host:e,port:Number.parseInt(i,10),tls:!0,tlsOptions:{rejectUnauthorized:!1}});return s.on("ready",()=>{let n=this;console.log("IMAP\u8FDE\u63A5\u5C31\u7EEA"),n.openInbox()}),s.on("error",n=>{console.error("IMAP\u8FDE\u63A5\u9519\u8BEF:",n)}),s.on("log",console.log),s}openInbox(){let t=this;t.imap.openBox("INBOX",!0,(o,r)=>{if(o)throw console.error("\u6253\u5F00\u90AE\u7BB1\u5931\u8D25:",o),o;console.log("listening..."),t.imap.on("mail",e=>{console.log(`\u6536\u5230\u65B0\u90AE\u4EF6: ${e}`),t.fetchLatestEmails(r,e)})})}fetchLatestEmails(t,o){let r=this,e=t.messages.total,i=`${Math.max(1,e-o+1)}:${e}`,s=r.imap.seq.fetch(i,{bodies:"",struct:!0,markSeen:!0});s.on("message",(n,p)=>{console.log(`\u6B63\u5728\u89E3\u6790\u90AE\u4EF6 #${p}`),n.on("body",(c,a)=>{console.log(`\u90AE\u4EF6\u5185\u5BB9\u7C7B\u578B: ${a.which}`),console.log(`\u90AE\u4EF6\u5927\u5C0F: ${a.size}`),r.parseEmail(c,a.size)}),n.on("end",()=>{console.log(`\u90AE\u4EF6 #${p} \u63A5\u6536\u5B8C\u6210`)})}),s.on("error",n=>{throw console.error(n),n}),s.on("end",()=>{console.log("\u90AE\u4EF6\u83B7\u53D6\u5B8C\u6210")})}parseEmail(t,o){let r=this,e=u.alloc(o),i=0;t.on("data",s=>{s.copy(e,i),i+=s.length,console.log(`received ${i} bytes, total ${o} bytes`)}),t.on("end",()=>{console.log("\u90AE\u4EF6\u5185\u5BB9\u89E3\u6790\u5B8C\u6210"),d(e).then(s=>{let{subject:n,text:p,html:c,attachments:a}=s;console.log(`\u6536\u5230\u4E8B\u4EF6: ${n}`),n&&r.emit(n,{text:p,html:c,attachments:a})})}),t.on("error",s=>{console.error(s)})}start(){this.imap.connect()}stop(){this.imap.end()}use(){}useCmds(t){let o=this;t.forEach(r=>{o.on(r.command,r.action)})}};import{createTransport as b}from"nodemailer";var m=class{transport;constructor(t){if(!t)throw new Error("options is required!");let{user:o,password:r,smtphost:e,smtpport:i,proxy:s}=t,n={pool:!0,host:e,port:i,secure:!0,auth:{user:o,pass:r},proxy:s};this.transport=b(n)}testTransport(){return new Promise((t,o)=>{this.transport.verify((r,e)=>{r?o(r):t(e)})})}send(t,o,r,e,i){return this.transport.sendMail({from:t,to:o,subject:r,text:e,html:i})}};export{l as EmailListener,m as EmialSender};
